name: Build lambda infrastructure

on:
  workflow_call:
    inputs:
      cognito_user_pool_id:
        required: true
        type: string
      cognito_user_pool_client_id:
        required: true
        type: string

env:
  TERRAFORM_DIR: terraform/lambda
  TF_VAR_environment: ${{ (github.ref_name == 'main' || github.event_name == 'pull_request') && 'prod' || 'dev' }}  
  TF_VAR_db_host:  ${{ vars.DB_HOST }}
  TF_VAR_db_name:  ${{ vars.DB_NAME }}
  TF_VAR_db_username: ${{ secrets.DB_USER }}
  TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
  TF_VAR_cognito_user_pool_id: ${{ inputs.cognito_user_pool_id }}
  TF_VAR_cognito_user_pool_client_id: ${{ inputs.cognito_user_pool_client_id }}
  TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}
  TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_aws_session_token: ${{ secrets.AWS_SESSION_TOKEN }}
jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2

      - name: Show inputs
        id: inputs
        run: |
          echo "cognito_user_pool_id -> ${{ inputs.cognito_user_pool_id }}"
          echo "cognito_user_pool_client_id-> ${{ inputs.cognito_user_pool_client_id }}" 
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - uses: actions/download-artifact@v4
        with:
          name: lambda_package
          path: ${{ env.TERRAFORM_DIR }}

      - name: Display structure of downloaded files
        run: ls -R
      
      - name: Setup Terraform
        run: ./terraform/setup.sh

      - name: Setup do Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.11.3"
          terraform_wrapper: false # Configura√ß√£o para permiter acesso aos outputs do terraform

      - name: Terraform Format
        id: fmt
        run: terraform -chdir=$TERRAFORM_DIR fmt -check

      - name: Terraform Init
        id: init
        run: terraform -chdir=$TERRAFORM_DIR init
      
      - name: Terraform Validate
        id: validate
        run: terraform -chdir=$TERRAFORM_DIR validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request' || github.ref_name == 'develop'
        run: terraform -chdir=$TERRAFORM_DIR plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          script: |
            const output = `#### Terraform - Formata√ß√£o e Estilo üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Init ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Valida√ß√£o ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Detalhes do Terraform Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Enviado por: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: (github.ref_name == 'main' || github.ref_name == 'develop') && github.event_name == 'push'
        run: terraform -chdir=$TERRAFORM_DIR apply -auto-approve -input=false
      
      - name: Export Terraform outputs
        id: tf
        run: |
          echo "API_GATEWAY_URL=$(terraform output -raw api_gateway_url)" >> $GITHUB_ENV
        working-directory: $TERRAFORM_DIR
      
      - name: Create Output
        run: |
          echo "## API Gateway Endpoint" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Servi√ßo dispon√≠vel em: http://${{ env.API_GATEWAY_URL }}" >> $GITHUB_STEP_SUMMARY
